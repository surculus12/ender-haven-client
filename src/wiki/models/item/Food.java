// automatically generated by the FlatBuffers compiler, do not modify

package wiki.models.item;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Food extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Food getRootAsFood(ByteBuffer _bb) { return getRootAsFood(_bb, new Food()); }
  public static Food getRootAsFood(ByteBuffer _bb, Food obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Food __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double hunger() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double energy() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public wiki.models.item.FoodIngredient ingredients(int j) { return ingredients(new wiki.models.item.FoodIngredient(), j); }
  public wiki.models.item.FoodIngredient ingredients(wiki.models.item.FoodIngredient obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ingredientsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public wiki.models.item.FoodIngredient.Vector ingredientsVector() { return ingredientsVector(new wiki.models.item.FoodIngredient.Vector()); }
  public wiki.models.item.FoodIngredient.Vector ingredientsVector(wiki.models.item.FoodIngredient.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFood(FlatBufferBuilder builder,
      double hunger,
      double energy,
      int ingredientsOffset) {
    builder.startTable(3);
    Food.addEnergy(builder, energy);
    Food.addHunger(builder, hunger);
    Food.addIngredients(builder, ingredientsOffset);
    return Food.endFood(builder);
  }

  public static void startFood(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addHunger(FlatBufferBuilder builder, double hunger) { builder.addDouble(0, hunger, 0.0); }
  public static void addEnergy(FlatBufferBuilder builder, double energy) { builder.addDouble(1, energy, 0.0); }
  public static void addIngredients(FlatBufferBuilder builder, int ingredientsOffset) { builder.addOffset(2, ingredientsOffset, 0); }
  public static int createIngredientsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIngredientsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFood(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Food get(int j) { return get(new Food(), j); }
    public Food get(Food obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

