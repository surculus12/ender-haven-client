// automatically generated by the FlatBuffers compiler, do not modify

package wiki.models.item;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FoodIngredient extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FoodIngredient getRootAsFoodIngredient(ByteBuffer _bb) { return getRootAsFoodIngredient(_bb, new FoodIngredient()); }
  public static FoodIngredient getRootAsFoodIngredient(ByteBuffer _bb, FoodIngredient obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FoodIngredient __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public double p() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createFoodIngredient(FlatBufferBuilder builder,
      int nameOffset,
      double p) {
    builder.startTable(2);
    FoodIngredient.addP(builder, p);
    FoodIngredient.addName(builder, nameOffset);
    return FoodIngredient.endFoodIngredient(builder);
  }

  public static void startFoodIngredient(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addP(FlatBufferBuilder builder, double p) { builder.addDouble(1, p, 0.0); }
  public static int endFoodIngredient(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FoodIngredient get(int j) { return get(new FoodIngredient(), j); }
    public FoodIngredient get(FoodIngredient obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

