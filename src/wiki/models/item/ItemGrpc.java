//Generated by flatc compiler (version 2.0.0)
//If you make any local changes, they will be lost
//source: item.fbs

package wiki.models.item;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: item.fbs")
public final class ItemGrpc {

  private ItemGrpc() {}
  
  public static final String SERVICE_NAME = "wiki.models.item.Item";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getCheckCacheMethod()} instead. 
  public static final io.grpc.MethodDescriptor<wiki.models.item.CheckCacheReq,
      wiki.models.item.CheckCacheRes> METHOD_CHECK_CACHE = getCheckCacheMethod();
  
  private static volatile io.grpc.MethodDescriptor<wiki.models.item.CheckCacheReq,
      wiki.models.item.CheckCacheRes> getCheckCacheMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<wiki.models.item.CheckCacheReq> extractorOfCheckCacheReq;
  private static FlatbuffersUtils.FBExtactor<wiki.models.item.CheckCacheReq> getExtractorOfCheckCacheReq() {
      if (extractorOfCheckCacheReq != null) return extractorOfCheckCacheReq;
      synchronized (ItemGrpc.class) {
          if (extractorOfCheckCacheReq != null) return extractorOfCheckCacheReq;
          extractorOfCheckCacheReq = new FlatbuffersUtils.FBExtactor<wiki.models.item.CheckCacheReq>() {
              public wiki.models.item.CheckCacheReq extract (ByteBuffer buffer) {
                  return wiki.models.item.CheckCacheReq.getRootAsCheckCacheReq(buffer);
              }
          };
          return extractorOfCheckCacheReq;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<wiki.models.item.CheckCacheRes> extractorOfCheckCacheRes;
  private static FlatbuffersUtils.FBExtactor<wiki.models.item.CheckCacheRes> getExtractorOfCheckCacheRes() {
      if (extractorOfCheckCacheRes != null) return extractorOfCheckCacheRes;
      synchronized (ItemGrpc.class) {
          if (extractorOfCheckCacheRes != null) return extractorOfCheckCacheRes;
          extractorOfCheckCacheRes = new FlatbuffersUtils.FBExtactor<wiki.models.item.CheckCacheRes>() {
              public wiki.models.item.CheckCacheRes extract (ByteBuffer buffer) {
                  return wiki.models.item.CheckCacheRes.getRootAsCheckCacheRes(buffer);
              }
          };
          return extractorOfCheckCacheRes;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<wiki.models.item.CheckCacheReq,
      wiki.models.item.CheckCacheRes> getCheckCacheMethod() {
    io.grpc.MethodDescriptor<wiki.models.item.CheckCacheReq, wiki.models.item.CheckCacheRes> getCheckCacheMethod;
    if ((getCheckCacheMethod = ItemGrpc.getCheckCacheMethod) == null) {
      synchronized (ItemGrpc.class) {
        if ((getCheckCacheMethod = ItemGrpc.getCheckCacheMethod) == null) {
          ItemGrpc.getCheckCacheMethod = getCheckCacheMethod = 
              io.grpc.MethodDescriptor.<wiki.models.item.CheckCacheReq, wiki.models.item.CheckCacheRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "wiki.models.item.Item", "CheckCache"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  wiki.models.item.CheckCacheReq.class, getExtractorOfCheckCacheReq()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  wiki.models.item.CheckCacheRes.class, getExtractorOfCheckCacheRes()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getCheckCacheMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getSendMethod()} instead. 
  public static final io.grpc.MethodDescriptor<wiki.models.item.SendReq,
      wiki.models.item.SendRes> METHOD_SEND = getSendMethod();
  
  private static volatile io.grpc.MethodDescriptor<wiki.models.item.SendReq,
      wiki.models.item.SendRes> getSendMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<wiki.models.item.SendReq> extractorOfSendReq;
  private static FlatbuffersUtils.FBExtactor<wiki.models.item.SendReq> getExtractorOfSendReq() {
      if (extractorOfSendReq != null) return extractorOfSendReq;
      synchronized (ItemGrpc.class) {
          if (extractorOfSendReq != null) return extractorOfSendReq;
          extractorOfSendReq = new FlatbuffersUtils.FBExtactor<wiki.models.item.SendReq>() {
              public wiki.models.item.SendReq extract (ByteBuffer buffer) {
                  return wiki.models.item.SendReq.getRootAsSendReq(buffer);
              }
          };
          return extractorOfSendReq;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<wiki.models.item.SendRes> extractorOfSendRes;
  private static FlatbuffersUtils.FBExtactor<wiki.models.item.SendRes> getExtractorOfSendRes() {
      if (extractorOfSendRes != null) return extractorOfSendRes;
      synchronized (ItemGrpc.class) {
          if (extractorOfSendRes != null) return extractorOfSendRes;
          extractorOfSendRes = new FlatbuffersUtils.FBExtactor<wiki.models.item.SendRes>() {
              public wiki.models.item.SendRes extract (ByteBuffer buffer) {
                  return wiki.models.item.SendRes.getRootAsSendRes(buffer);
              }
          };
          return extractorOfSendRes;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<wiki.models.item.SendReq,
      wiki.models.item.SendRes> getSendMethod() {
    io.grpc.MethodDescriptor<wiki.models.item.SendReq, wiki.models.item.SendRes> getSendMethod;
    if ((getSendMethod = ItemGrpc.getSendMethod) == null) {
      synchronized (ItemGrpc.class) {
        if ((getSendMethod = ItemGrpc.getSendMethod) == null) {
          ItemGrpc.getSendMethod = getSendMethod = 
              io.grpc.MethodDescriptor.<wiki.models.item.SendReq, wiki.models.item.SendRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "wiki.models.item.Item", "Send"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  wiki.models.item.SendReq.class, getExtractorOfSendReq()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  wiki.models.item.SendRes.class, getExtractorOfSendRes()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getSendMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static ItemStub newStub(io.grpc.Channel channel) {
    return new ItemStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static ItemBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new ItemBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static ItemFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new ItemFutureStub(channel);
  }
  
  /**
   */
  public static abstract class ItemImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     void checkCache(wiki.models.item.CheckCacheReq request,
        io.grpc.stub.StreamObserver<wiki.models.item.CheckCacheRes> responseObserver)     {
      asyncUnimplementedUnaryCall(getCheckCacheMethod(), responseObserver);
    }
    
    /**
     */
    public     void send(wiki.models.item.SendReq request,
        io.grpc.stub.StreamObserver<wiki.models.item.SendRes> responseObserver)     {
      asyncUnimplementedUnaryCall(getSendMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getCheckCacheMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                wiki.models.item.CheckCacheReq,
                wiki.models.item.CheckCacheRes>(
                  this, METHODID_CHECK_CACHE)))
          .addMethod(
            getSendMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                wiki.models.item.SendReq,
                wiki.models.item.SendRes>(
                  this, METHODID_SEND)))
          .build();
    }
  }
  
  /**
   */
  public static final class ItemStub extends io.grpc.stub.AbstractStub<ItemStub> {
    private ItemStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private ItemStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected ItemStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ItemStub(channel, callOptions);
    }
    
    /**
     */
    public     void checkCache(wiki.models.item.CheckCacheReq request,
        io.grpc.stub.StreamObserver<wiki.models.item.CheckCacheRes> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getCheckCacheMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void send(wiki.models.item.SendReq request,
        io.grpc.stub.StreamObserver<wiki.models.item.SendRes> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getSendMethod(), getCallOptions()), request, responseObserver);
    }
  }
  
  /**
   */
  public static final class ItemBlockingStub extends io.grpc.stub.AbstractStub<ItemBlockingStub> {
    private ItemBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private ItemBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected ItemBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ItemBlockingStub(channel, callOptions);
    }
    
    /**
     */
    public     wiki.models.item.CheckCacheRes checkCache(wiki.models.item.CheckCacheReq request)     {
      return blockingUnaryCall(
          getChannel(), getCheckCacheMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     wiki.models.item.SendRes send(wiki.models.item.SendReq request)     {
      return blockingUnaryCall(
          getChannel(), getSendMethod(), getCallOptions(), request);
    }
  }
  
  /**
   */
  public static final class ItemFutureStub extends io.grpc.stub.AbstractStub<ItemFutureStub> {
    private ItemFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private ItemFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected ItemFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ItemFutureStub(channel, callOptions);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<wiki.models.item.CheckCacheRes> checkCache(
        wiki.models.item.CheckCacheReq request)     {
      return futureUnaryCall(
          getChannel().newCall(getCheckCacheMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<wiki.models.item.SendRes> send(
        wiki.models.item.SendReq request)     {
      return futureUnaryCall(
          getChannel().newCall(getSendMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_CHECK_CACHE = 0;
  private static final int METHODID_SEND = 1;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final ItemImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(ItemImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_CHECK_CACHE:
          serviceImpl.checkCache((wiki.models.item.CheckCacheReq) request,
              (io.grpc.stub.StreamObserver<wiki.models.item.CheckCacheRes>) responseObserver);
          break;
        case METHODID_SEND:
          serviceImpl.send((wiki.models.item.SendReq) request,
              (io.grpc.stub.StreamObserver<wiki.models.item.SendRes>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (ItemGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getCheckCacheMethod())              
              .addMethod(getSendMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
